uvicorn main:app --reload --port 8000

QUERY FOR TABLEES IN PGADMIN QUERY TOOL 

-- 1) Core tables
CREATE TABLE IF NOT EXISTS cache_items (
  id               BIGSERIAL PRIMARY KEY,
  object_id        TEXT UNIQUE NOT NULL,
  size_bytes       BIGINT       NOT NULL,
  last_updated_ts  TIMESTAMPTZ  NOT NULL,
  ttl_s            INT          NOT NULL,
  inserted_ts      TIMESTAMPTZ  NOT NULL DEFAULT now()
);

CREATE TABLE IF NOT EXISTS requests (
  id                 BIGSERIAL PRIMARY KEY,
  ts                 TIMESTAMPTZ NOT NULL,
  client_id          TEXT,
  object_id          TEXT        NOT NULL,
  object_size_bytes  BIGINT      NOT NULL,
  origin_latency_ms  INT         NOT NULL,
  was_write          BOOLEAN     NOT NULL DEFAULT FALSE
);

CREATE TABLE IF NOT EXISTS outcomes (
  id                 BIGSERIAL PRIMARY KEY,
  request_id         BIGINT      NOT NULL REFERENCES requests(id) ON DELETE CASCADE,
  cache_hit          BOOLEAN     NOT NULL,
  served_latency_ms  INT         NOT NULL,
  staleness_s        INT         NOT NULL DEFAULT 0
);

CREATE TABLE IF NOT EXISTS agent_events (
  id         BIGSERIAL PRIMARY KEY,
  ts         TIMESTAMPTZ NOT NULL DEFAULT now(),
  state_json JSONB       NOT NULL,
  action     TEXT        NOT NULL,
  reward     DOUBLE PRECISION,
  object_id  TEXT
);

-- 2) Helpful indexes for speed
CREATE INDEX IF NOT EXISTS idx_requests_object_ts ON requests (object_id, ts);
CREATE INDEX IF NOT EXISTS idx_outcomes_request_id ON outcomes (request_id);
CREATE INDEX IF NOT EXISTS idx_cache_items_object ON cache_items (object_id);
CREATE INDEX IF NOT EXISTS idx_agent_events_ts ON agent_events (ts);
CREATE INDEX IF NOT EXISTS idx_agent_events_object ON agent_events (object_id);



for the schemas.py (Pydantic models)

These are strict, typed “contracts” for JSON your API accepts/returns.

RequestIn → the body you POST to /api/request when simulating one request.

ts: ISO timestamp string (e.g., "2025-08-19T09:00:00Z").

client_id: who asked.

object_id: what content was requested (e.g., "item42").

object_size_bytes: size of that content.

origin_latency_ms: time it would take to fetch from origin (DB/backend).

was_write: if true, treat as an update/write (we’ll refresh cache).

OutcomeOut → what /api/request returns: was it a hit? what latency? etc.

StatsOut → what /api/stats returns: hit ratio %, avg latency, staleness %.